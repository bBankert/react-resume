{"version":3,"sources":["components/loading/loading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","$","modal","id","className","tabIndex","role","React","Component","Header","lazy","Content","Footer","App","useState","loading","setLoading","Navigation","Introduction","data","setData","useEffect","fetch","window","location","then","res","json","fallback","Fragment","header","footer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oUAgCeA,G,6KA1BX,WACIC,IAAE,iBAAiBC,MAAM,U,kCAG7B,WACID,IAAE,iBAAiBC,MAAM,U,oBAK7B,WACI,OAAO,yBAAKC,GAAG,UAAUC,UAAU,kCAC/B,yBAAKA,UAAU,QAAQD,GAAG,eAAeE,SAAS,KAAKC,KAAK,UACxD,yBAAKF,UAAU,eAAeE,KAAK,YAC/B,yBAAKF,UAAU,iBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,WACf,+D,GAnBNG,IAAMC,YCCtBC,EAASC,gBAAK,kBAAM,sDACpBC,EAAUD,gBAAK,kBAAM,gCACrBE,EAASF,gBAAK,kBAAM,gCAgDXG,EA9CH,WAEV,MAA6BC,mBAAS,GAAtC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAuBF,mBAAS,CAC9BG,WAAY,GACZC,aAAc,GACdP,QAAS,KAHX,mBAAOQ,EAAP,KAAYC,EAAZ,KA0BA,OAnBAC,qBAAU,WAENC,MAAMC,OAAOC,SAAW,mBACvBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACNP,GAAQ,iBAAO,CACbH,WAAYU,EAAKV,WACjBC,aAAcS,EAAKT,aACnBP,QAASgB,EAAKhB,QACdC,OAAQe,EAAKf,WAEfI,EAAW,QAKb,CAACD,IAID,6BACE,kBAAC,WAAD,CAAUa,SAAU,kBAAC,EAAD,OACL,IAAZb,EACC,kBAAC,EAAD,MACA,kBAAC,IAAMc,SAAP,KACE,kBAACpB,EAAD,CAAQqB,OAAQX,EAAKF,aACrB,kBAACN,EAAD,CAASQ,KAAMA,IACf,kBAACP,EAAD,CAAQmB,OAAQZ,EAAKP,WAI3B,kBAAC,EAAD,Q,kBCtCcoB,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e69d786.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport './loading.css';\n\nclass Loading extends React.Component {\n\n    componentDidMount(){\n        $('#loadingModal').modal('show');\n    }\n\n    componentWillUnmount(){\n        $('#loadingModal').modal('hide');\n    }\n\n\n\n    render(){\n        return(<div id=\"loading\" className=\"col-md-6 offset-md-3 col-sm-12\">\n            <div className=\"modal\" id=\"loadingModal\" tabIndex=\"-1\" role=\"dialog\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-body\">\n                            <div className=\"loader\"></div>\n                            <p>Loading, Please Wait...</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n    }\n}\n\nexport default Loading;","import React,{useState,useEffect,Suspense,lazy} from 'react';\nimport './App.css';\n//has to be synchronous since this is the fallback component\nimport Loading from './components/loading/loading';\n\nconst Header = lazy(() => import('./containers/header'));\nconst Content = lazy(() => import('./containers/content'));\nconst Footer = lazy(() => import('./containers/footer/footer'));\n\nconst App = () => {\n\n  const [loading,setLoading] = useState(1);\n  const [data,setData] = useState({\n    Navigation: [],\n    Introduction: {},\n    Content: {},\n  });\n\n\n  useEffect(()=>{\n      //live version\n      fetch(window.location + \"/data/data.json\")\n      .then(res => res.json())\n      .then(json => {\n      setData(() => ({\n        Navigation: json.Navigation,\n        Introduction: json.Introduction,\n        Content: json.Content,\n        Footer: json.Footer\n      }));\n      setLoading(0);\n    })\n\n    \n    \n  },[loading]);\n\n\n  return (\n    <div>\n      <Suspense fallback={<Loading/>}>\n        {loading === 1 ? \n          <Loading/> : \n          <React.Fragment>\n            <Header header={data.Navigation}/>\n            <Content data={data}/>\n            <Footer footer={data.Footer} />\n          </React.Fragment>\n        }\n      </Suspense>\n      <Loading/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap';\nimport 'bootstrap/dist/js/bootstrap.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}