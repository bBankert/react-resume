{"version":3,"sources":["components/navigation/navigationItem.js","components/navigation/navigation.js","containers/header.js","components/cards/introduction.js","components/cards/card/card-content.js","components/cards/card/card.js","components/cards/cards.js","containers/content.js","containers/footer.js","App.js","serviceWorker.js","index.js"],"names":["NavigationItem","props","class","href","link","replace","toLocaleLowerCase","Navigation","id","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","data","map","Header","header","length","Introduction","src","introduction","Image","alt","Name","Title","CardContent","content","Subheading","Details","detail","Link","Card","useEffect","card","Subsections","section","Cards","Content","Object","keys","Footer","download","App","useState","setData","fetch","then","res","json","catch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2eca7622.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavigationItem = props => (\r\n    <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href={\"#\"+(props.link.replace(\" \",\"-\").toLocaleLowerCase())}>{props.link}</a>\r\n      </li>\r\n);\r\n\r\nexport default NavigationItem;","import React from 'react';\r\nimport NavigationItem from './navigationItem';\r\n\r\nconst Navigation = props => (\r\n    <nav id=\"navigation\" className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul class=\"navbar-nav\">\r\n          {props.data.map((link) => \r\n              <NavigationItem link={link}/>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n);\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from '../components/navigation/navigation';\r\n\r\nconst Header = props => (\r\n    <div id=\"header\">\r\n        {props.header && props.header.length > 0 ? <Navigation data={props.header}/> : <p>Loading</p>}\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React,{useEffect,useState} from 'react';\r\nimport './introduction.css';\r\n\r\nconst Introduction = props => {\r\n\r\n\r\n    return (\r\n    <div id=\"introduction\" className=\"my-4\">\r\n        <div className=\"offset-md-3 col-md-6 col-sm-12\">\r\n            <img src={props.introduction.Image} alt=\"broken image\"/>\r\n        </div>\r\n        <div className=\"offset-md-3 col-md-6 col-sm-12\">\r\n            <h3 className=\"name\">{props.introduction.Name}</h3>\r\n            <h4 className=\"title text-muted\">{props.introduction.Title}</h4>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Introduction;","import React from 'react';\r\n\r\nconst CardContent = props => {\r\n\r\n    return(\r\n        <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">\r\n                <h5>{props.content.Subheading}</h5>\r\n                <ul>\r\n                    {props.content.Details.map((detail) => \r\n                        <li>{detail}</li>\r\n                    )}\r\n                    {props.content.Link ? <a href={props.content.Link}><li>Live Link</li></a> : \"\"}\r\n                </ul>\r\n            </li>    \r\n        </ul>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default CardContent;","import React,{useEffect} from 'react';\r\nimport CardContent from './card-content';\r\n\r\nconst Card = props => {\r\n\r\n    useEffect(() => {\r\n        // props.content.map((card) => {\r\n        //     //console.log(card);\r\n        //     card.Subsections.map((section) => {\r\n        //         //console.log(section);\r\n        //         section.Details.map((detail) => {\r\n        //             console.log(detail);\r\n        //         })\r\n        //     });\r\n        // });\r\n            //\r\n\r\n    }, [props.content]);\r\n\r\n    //const card = props.content[0];\r\n\r\n    return(\r\n\r\n        <div id={(props.card.Header.replace(\" \",\"-\").toLocaleLowerCase())} className=\"my-4\">\r\n         <div className=\"card\">\r\n             <div className=\"card-header bg-info\">\r\n                 {props.card.Header}\r\n             </div>\r\n             <div className=\"card-body\">\r\n                 {props.card.Subsections.map((section) => \r\n                 <CardContent content = {section} />  \r\n                 )}\r\n             </div>\r\n         </div>\r\n     </div>\r\n        \r\n        \r\n        );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card/card';\r\n\r\nconst Cards = props => {\r\n    return(\r\n        <div>\r\n            {props.content.map((card) =>\r\n                <Card card={card}/>\r\n            )};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import React,{useEffect} from  'react';\r\nimport Introduction from '../components/cards/introduction';\r\nimport Cards from '../components/cards/cards';\r\n\r\nconst Content = props => {\r\n\r\n    // useEffect(() => {\r\n    //     console.log(props.data && Object.keys(props.data.Content).length > 0 ? props.data : \"not loaded\");\r\n        \r\n    // }, [props.data.Content])\r\n\r\n\r\n    return(\r\n\r\n    <div className=\"offset-md-2 col-md-7 col-sm-12\">\r\n        <Introduction introduction={props.data.Introduction}/>\r\n        {/* <Education/>\r\n        <Projects/>\r\n        <Work/> */}\r\n        {props.data && Object.keys(props.data.Content).length > 0  ?<Cards content={props.data.Content}/> : <p>Loading...</p>  }\r\n       \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = props => (\r\n    <div id=\"footer\" className=\"col-12\">\r\n        <a href=\"react-resume/documents/Resume.pdf\" download>Download Resume</a>\r\n        <a href=\"http://www.github.com/bBankert\">GitHub</a>\r\n        <a href=\"mailto:bankert.brandon@gmail.com\">Contact Me</a>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Header from './containers/header';\nimport Content from  './containers/content';\nimport Footer from './containers/footer';\n\nconst App = () => {\n\n  const [data,setData] = useState({\n    Navigation: [],\n    Introduction: {},\n    Content: {},\n  });\n\n\n  useEffect(()=>{\n      //live version\n      fetch(\"./data/data.json\")\n      .then(res => res.json())\n      .then(json => {\n      setData(() => ({\n        Navigation: json.Navigation,\n        Introduction: json.Introduction,\n        Content: json.Content,\n      }));\n    })\n    .catch(() => {\n      //dev version\n      fetch(\"/react-resume/data/data.json\")\n      .then(res => res.json())\n      .then(json => {\n      setData(() => ({\n        Navigation: json.Navigation,\n        Introduction: json.Introduction,\n        Content: json.Content,\n      }));\n    });\n    });\n    \n  },[]);\n\n  return (\n    <div>\n      <Header header={data.Navigation}/>\n      <Content data={data}/>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap';\nimport 'bootstrap/dist/js/bootstrap.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}