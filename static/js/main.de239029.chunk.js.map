{"version":3,"sources":["components/loading/loading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","$","modal","id","className","tabIndex","role","React","Component","Header","lazy","Content","Footer","App","useState","loading","setLoading","Navigation","Introduction","data","setData","useEffect","fetch","window","location","then","res","json","fallback","Fragment","header","footer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oUAgCeA,G,6KA1BX,WACIC,IAAE,iBAAiBC,MAAM,U,kCAG7B,WACID,IAAE,iBAAiBC,MAAM,U,oBAK7B,WACI,OAAO,yBAAKC,GAAG,UAAUC,UAAU,kCAC/B,yBAAKA,UAAU,QAAQD,GAAG,eAAeE,SAAS,KAAKC,KAAK,UACxD,yBAAKF,UAAU,eAAeE,KAAK,YAC/B,yBAAKF,UAAU,iBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,WACf,+D,GAnBNG,IAAMC,YCCtBC,EAASC,gBAAK,kBAAM,sDACpBC,EAAUD,gBAAK,kBAAM,gCACrBE,EAASF,gBAAK,kBAAM,gCAgDXG,EA9CH,WAAO,IAAD,EAEaC,mBAAS,GAFtB,mBAETC,EAFS,KAEDC,EAFC,OAGOF,mBAAS,CAC9BG,WAAY,GACZC,aAAc,GACdP,QAAS,KANK,mBAGTQ,EAHS,KAGJC,EAHI,KA6BhB,OAnBAC,qBAAU,WAENC,MAAMC,OAAOC,SAAW,mBACvBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACNP,GAAQ,iBAAO,CACbH,WAAYU,EAAKV,WACjBC,aAAcS,EAAKT,aACnBP,QAASgB,EAAKhB,QACdC,OAAQe,EAAKf,WAEfI,EAAW,QAKb,CAACD,IAID,6BACE,kBAAC,WAAD,CAAUa,SAAU,kBAAC,EAAD,OACL,IAAZb,EACC,kBAAC,EAAD,MACA,kBAAC,IAAMc,SAAP,KACE,kBAACpB,EAAD,CAAQqB,OAAQX,EAAKF,aACrB,kBAACN,EAAD,CAASQ,KAAMA,IACf,kBAACP,EAAD,CAAQmB,OAAQZ,EAAKP,WAI3B,kBAAC,EAAD,Q,kBCtCcoB,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de239029.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\nimport './loading.css';\r\n\r\nclass Loading extends React.Component {\r\n\r\n    componentDidMount(){\r\n        $('#loadingModal').modal('show');\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        $('#loadingModal').modal('hide');\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(<div id=\"loading\" className=\"col-md-6 offset-md-3 col-sm-12\">\r\n            <div className=\"modal\" id=\"loadingModal\" tabIndex=\"-1\" role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"loader\"></div>\r\n                            <p>Loading, Please Wait...</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Loading;","import React,{useState,useEffect,Suspense,lazy} from 'react';\r\nimport './App.css';\r\n//has to be synchronous since this is the fallback component\r\nimport Loading from './components/loading/loading';\r\n\r\nconst Header = lazy(() => import('./containers/header'));\r\nconst Content = lazy(() => import('./containers/content'));\r\nconst Footer = lazy(() => import('./containers/footer/footer'));\r\n\r\nconst App = () => {\r\n\r\n  const [loading,setLoading] = useState(1);\r\n  const [data,setData] = useState({\r\n    Navigation: [],\r\n    Introduction: {},\r\n    Content: {},\r\n  });\r\n\r\n\r\n  useEffect(()=>{\r\n      //live version\r\n      fetch(window.location + \"/data/data.json\")\r\n      .then(res => res.json())\r\n      .then(json => {\r\n      setData(() => ({\r\n        Navigation: json.Navigation,\r\n        Introduction: json.Introduction,\r\n        Content: json.Content,\r\n        Footer: json.Footer\r\n      }));\r\n      setLoading(0);\r\n    })\r\n\r\n    \r\n    \r\n  },[loading]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<Loading/>}>\r\n        {loading === 1 ? \r\n          <Loading/> : \r\n          <React.Fragment>\r\n            <Header header={data.Navigation}/>\r\n            <Content data={data}/>\r\n            <Footer footer={data.Footer} />\r\n          </React.Fragment>\r\n        }\r\n      </Suspense>\r\n      <Loading/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/js/bootstrap.min';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}